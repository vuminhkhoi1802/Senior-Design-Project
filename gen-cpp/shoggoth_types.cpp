/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "shoggoth_types.h"

#include <algorithm>



int _kPointModeValues[] = {
  PointMode::MANUAL,
  PointMode::AUTOMATIC
};
const char* _kPointModeNames[] = {
  "MANUAL",
  "AUTOMATIC"
};
const std::map<int, const char*> _PointMode_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kPointModeValues, _kPointModeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kLightStatusValues[] = {
  LightStatus::OVERHEAT,
  LightStatus::ON,
  LightStatus::OFF
};
const char* _kLightStatusNames[] = {
  "OVERHEAT",
  "ON",
  "OFF"
};
const std::map<int, const char*> _LightStatus_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kLightStatusValues, _kLightStatusNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kMoveStatusValues[] = {
  MoveStatus::RUNNING,
  MoveStatus::UNCAL,
  MoveStatus::CALLING,
  MoveStatus::SLEEPING,
  MoveStatus::TILT_OVERCUR,
  MoveStatus::TILT_FAULT,
  MoveStatus::PAN_OVERCUR,
  MoveStatus::PAN_FAULT
};
const char* _kMoveStatusNames[] = {
  "RUNNING",
  "UNCAL",
  "CALLING",
  "SLEEPING",
  "TILT_OVERCUR",
  "TILT_FAULT",
  "PAN_OVERCUR",
  "PAN_FAULT"
};
const std::map<int, const char*> _MoveStatus_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(8, _kMoveStatusValues, _kMoveStatusNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

const char* Coordinates::ascii_fingerprint = "C88FB7958D86460D03E699333A272947";
const uint8_t Coordinates::binary_fingerprint[16] = {0xC8,0x8F,0xB7,0x95,0x8D,0x86,0x46,0x0D,0x03,0xE6,0x99,0x33,0x3A,0x27,0x29,0x47};

uint32_t Coordinates::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->x);
          this->__isset.x = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->y);
          this->__isset.y = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Coordinates::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Coordinates");

  xfer += oprot->writeFieldBegin("x", ::apache::thrift::protocol::T_I16, 1);
  xfer += oprot->writeI16(this->x);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("y", ::apache::thrift::protocol::T_I16, 2);
  xfer += oprot->writeI16(this->y);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Coordinates &a, Coordinates &b) {
  using ::std::swap;
  swap(a.x, b.x);
  swap(a.y, b.y);
  swap(a.__isset, b.__isset);
}


