/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Tracking_H
#define Tracking_H

#include <thrift/TDispatchProcessor.h>
#include "shoggoth_types.h"



class TrackingIf {
 public:
  virtual ~TrackingIf() {}
  virtual void setMode(const PointMode::type mode) = 0;
  virtual PointMode::type getMode() = 0;
  virtual void setPos(const Coordinates& coord) = 0;
  virtual void setOnOff(const bool state) = 0;
  virtual void halt() = 0;
  virtual void sleep() = 0;
  virtual void wake() = 0;
  virtual void setIntensity(const int8_t intens) = 0;
  virtual void calibrate() = 0;
  virtual LightStatus::type getLightStatus() = 0;
  virtual int8_t getIntensity() = 0;
  virtual MoveStatus::type getMoveStatus() = 0;
  virtual void getActualPos(Coordinates& _return) = 0;
};

class TrackingIfFactory {
 public:
  typedef TrackingIf Handler;

  virtual ~TrackingIfFactory() {}

  virtual TrackingIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(TrackingIf* /* handler */) = 0;
};

class TrackingIfSingletonFactory : virtual public TrackingIfFactory {
 public:
  TrackingIfSingletonFactory(const boost::shared_ptr<TrackingIf>& iface) : iface_(iface) {}
  virtual ~TrackingIfSingletonFactory() {}

  virtual TrackingIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(TrackingIf* /* handler */) {}

 protected:
  boost::shared_ptr<TrackingIf> iface_;
};

class TrackingNull : virtual public TrackingIf {
 public:
  virtual ~TrackingNull() {}
  void setMode(const PointMode::type /* mode */) {
    return;
  }
  PointMode::type getMode() {
    PointMode::type _return = (PointMode::type)0;
    return _return;
  }
  void setPos(const Coordinates& /* coord */) {
    return;
  }
  void setOnOff(const bool /* state */) {
    return;
  }
  void halt() {
    return;
  }
  void sleep() {
    return;
  }
  void wake() {
    return;
  }
  void setIntensity(const int8_t /* intens */) {
    return;
  }
  void calibrate() {
    return;
  }
  LightStatus::type getLightStatus() {
    LightStatus::type _return = (LightStatus::type)0;
    return _return;
  }
  int8_t getIntensity() {
    int8_t _return = 0;
    return _return;
  }
  MoveStatus::type getMoveStatus() {
    MoveStatus::type _return = (MoveStatus::type)0;
    return _return;
  }
  void getActualPos(Coordinates& /* _return */) {
    return;
  }
};

typedef struct _Tracking_setMode_args__isset {
  _Tracking_setMode_args__isset() : mode(false) {}
  bool mode;
} _Tracking_setMode_args__isset;

class Tracking_setMode_args {
 public:

  Tracking_setMode_args() : mode((PointMode::type)0) {
  }

  virtual ~Tracking_setMode_args() throw() {}

  PointMode::type mode;

  _Tracking_setMode_args__isset __isset;

  void __set_mode(const PointMode::type val) {
    mode = val;
  }

  bool operator == (const Tracking_setMode_args & rhs) const
  {
    if (!(mode == rhs.mode))
      return false;
    return true;
  }
  bool operator != (const Tracking_setMode_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Tracking_setMode_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Tracking_setMode_pargs {
 public:


  virtual ~Tracking_setMode_pargs() throw() {}

  const PointMode::type* mode;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Tracking_setMode_result {
 public:

  Tracking_setMode_result() {
  }

  virtual ~Tracking_setMode_result() throw() {}


  bool operator == (const Tracking_setMode_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Tracking_setMode_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Tracking_setMode_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Tracking_setMode_presult {
 public:


  virtual ~Tracking_setMode_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Tracking_getMode_args {
 public:

  Tracking_getMode_args() {
  }

  virtual ~Tracking_getMode_args() throw() {}


  bool operator == (const Tracking_getMode_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Tracking_getMode_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Tracking_getMode_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Tracking_getMode_pargs {
 public:


  virtual ~Tracking_getMode_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Tracking_getMode_result__isset {
  _Tracking_getMode_result__isset() : success(false) {}
  bool success;
} _Tracking_getMode_result__isset;

class Tracking_getMode_result {
 public:

  Tracking_getMode_result() : success((PointMode::type)0) {
  }

  virtual ~Tracking_getMode_result() throw() {}

  PointMode::type success;

  _Tracking_getMode_result__isset __isset;

  void __set_success(const PointMode::type val) {
    success = val;
  }

  bool operator == (const Tracking_getMode_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Tracking_getMode_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Tracking_getMode_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Tracking_getMode_presult__isset {
  _Tracking_getMode_presult__isset() : success(false) {}
  bool success;
} _Tracking_getMode_presult__isset;

class Tracking_getMode_presult {
 public:


  virtual ~Tracking_getMode_presult() throw() {}

  PointMode::type* success;

  _Tracking_getMode_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Tracking_setPos_args__isset {
  _Tracking_setPos_args__isset() : coord(false) {}
  bool coord;
} _Tracking_setPos_args__isset;

class Tracking_setPos_args {
 public:

  Tracking_setPos_args() {
  }

  virtual ~Tracking_setPos_args() throw() {}

  Coordinates coord;

  _Tracking_setPos_args__isset __isset;

  void __set_coord(const Coordinates& val) {
    coord = val;
  }

  bool operator == (const Tracking_setPos_args & rhs) const
  {
    if (!(coord == rhs.coord))
      return false;
    return true;
  }
  bool operator != (const Tracking_setPos_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Tracking_setPos_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Tracking_setPos_pargs {
 public:


  virtual ~Tracking_setPos_pargs() throw() {}

  const Coordinates* coord;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Tracking_setPos_result {
 public:

  Tracking_setPos_result() {
  }

  virtual ~Tracking_setPos_result() throw() {}


  bool operator == (const Tracking_setPos_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Tracking_setPos_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Tracking_setPos_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Tracking_setPos_presult {
 public:


  virtual ~Tracking_setPos_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Tracking_setOnOff_args__isset {
  _Tracking_setOnOff_args__isset() : state(false) {}
  bool state;
} _Tracking_setOnOff_args__isset;

class Tracking_setOnOff_args {
 public:

  Tracking_setOnOff_args() : state(0) {
  }

  virtual ~Tracking_setOnOff_args() throw() {}

  bool state;

  _Tracking_setOnOff_args__isset __isset;

  void __set_state(const bool val) {
    state = val;
  }

  bool operator == (const Tracking_setOnOff_args & rhs) const
  {
    if (!(state == rhs.state))
      return false;
    return true;
  }
  bool operator != (const Tracking_setOnOff_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Tracking_setOnOff_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Tracking_setOnOff_pargs {
 public:


  virtual ~Tracking_setOnOff_pargs() throw() {}

  const bool* state;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Tracking_setOnOff_result {
 public:

  Tracking_setOnOff_result() {
  }

  virtual ~Tracking_setOnOff_result() throw() {}


  bool operator == (const Tracking_setOnOff_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Tracking_setOnOff_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Tracking_setOnOff_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Tracking_setOnOff_presult {
 public:


  virtual ~Tracking_setOnOff_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Tracking_halt_args {
 public:

  Tracking_halt_args() {
  }

  virtual ~Tracking_halt_args() throw() {}


  bool operator == (const Tracking_halt_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Tracking_halt_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Tracking_halt_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Tracking_halt_pargs {
 public:


  virtual ~Tracking_halt_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Tracking_halt_result {
 public:

  Tracking_halt_result() {
  }

  virtual ~Tracking_halt_result() throw() {}


  bool operator == (const Tracking_halt_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Tracking_halt_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Tracking_halt_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Tracking_halt_presult {
 public:


  virtual ~Tracking_halt_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Tracking_sleep_args {
 public:

  Tracking_sleep_args() {
  }

  virtual ~Tracking_sleep_args() throw() {}


  bool operator == (const Tracking_sleep_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Tracking_sleep_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Tracking_sleep_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Tracking_sleep_pargs {
 public:


  virtual ~Tracking_sleep_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Tracking_sleep_result {
 public:

  Tracking_sleep_result() {
  }

  virtual ~Tracking_sleep_result() throw() {}


  bool operator == (const Tracking_sleep_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Tracking_sleep_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Tracking_sleep_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Tracking_sleep_presult {
 public:


  virtual ~Tracking_sleep_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Tracking_wake_args {
 public:

  Tracking_wake_args() {
  }

  virtual ~Tracking_wake_args() throw() {}


  bool operator == (const Tracking_wake_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Tracking_wake_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Tracking_wake_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Tracking_wake_pargs {
 public:


  virtual ~Tracking_wake_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Tracking_wake_result {
 public:

  Tracking_wake_result() {
  }

  virtual ~Tracking_wake_result() throw() {}


  bool operator == (const Tracking_wake_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Tracking_wake_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Tracking_wake_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Tracking_wake_presult {
 public:


  virtual ~Tracking_wake_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Tracking_setIntensity_args__isset {
  _Tracking_setIntensity_args__isset() : intens(false) {}
  bool intens;
} _Tracking_setIntensity_args__isset;

class Tracking_setIntensity_args {
 public:

  Tracking_setIntensity_args() : intens(0) {
  }

  virtual ~Tracking_setIntensity_args() throw() {}

  int8_t intens;

  _Tracking_setIntensity_args__isset __isset;

  void __set_intens(const int8_t val) {
    intens = val;
  }

  bool operator == (const Tracking_setIntensity_args & rhs) const
  {
    if (!(intens == rhs.intens))
      return false;
    return true;
  }
  bool operator != (const Tracking_setIntensity_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Tracking_setIntensity_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Tracking_setIntensity_pargs {
 public:


  virtual ~Tracking_setIntensity_pargs() throw() {}

  const int8_t* intens;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Tracking_setIntensity_result {
 public:

  Tracking_setIntensity_result() {
  }

  virtual ~Tracking_setIntensity_result() throw() {}


  bool operator == (const Tracking_setIntensity_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Tracking_setIntensity_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Tracking_setIntensity_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Tracking_setIntensity_presult {
 public:


  virtual ~Tracking_setIntensity_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Tracking_calibrate_args {
 public:

  Tracking_calibrate_args() {
  }

  virtual ~Tracking_calibrate_args() throw() {}


  bool operator == (const Tracking_calibrate_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Tracking_calibrate_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Tracking_calibrate_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Tracking_calibrate_pargs {
 public:


  virtual ~Tracking_calibrate_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Tracking_calibrate_result {
 public:

  Tracking_calibrate_result() {
  }

  virtual ~Tracking_calibrate_result() throw() {}


  bool operator == (const Tracking_calibrate_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Tracking_calibrate_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Tracking_calibrate_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Tracking_calibrate_presult {
 public:


  virtual ~Tracking_calibrate_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Tracking_getLightStatus_args {
 public:

  Tracking_getLightStatus_args() {
  }

  virtual ~Tracking_getLightStatus_args() throw() {}


  bool operator == (const Tracking_getLightStatus_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Tracking_getLightStatus_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Tracking_getLightStatus_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Tracking_getLightStatus_pargs {
 public:


  virtual ~Tracking_getLightStatus_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Tracking_getLightStatus_result__isset {
  _Tracking_getLightStatus_result__isset() : success(false) {}
  bool success;
} _Tracking_getLightStatus_result__isset;

class Tracking_getLightStatus_result {
 public:

  Tracking_getLightStatus_result() : success((LightStatus::type)0) {
  }

  virtual ~Tracking_getLightStatus_result() throw() {}

  LightStatus::type success;

  _Tracking_getLightStatus_result__isset __isset;

  void __set_success(const LightStatus::type val) {
    success = val;
  }

  bool operator == (const Tracking_getLightStatus_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Tracking_getLightStatus_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Tracking_getLightStatus_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Tracking_getLightStatus_presult__isset {
  _Tracking_getLightStatus_presult__isset() : success(false) {}
  bool success;
} _Tracking_getLightStatus_presult__isset;

class Tracking_getLightStatus_presult {
 public:


  virtual ~Tracking_getLightStatus_presult() throw() {}

  LightStatus::type* success;

  _Tracking_getLightStatus_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Tracking_getIntensity_args {
 public:

  Tracking_getIntensity_args() {
  }

  virtual ~Tracking_getIntensity_args() throw() {}


  bool operator == (const Tracking_getIntensity_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Tracking_getIntensity_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Tracking_getIntensity_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Tracking_getIntensity_pargs {
 public:


  virtual ~Tracking_getIntensity_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Tracking_getIntensity_result__isset {
  _Tracking_getIntensity_result__isset() : success(false) {}
  bool success;
} _Tracking_getIntensity_result__isset;

class Tracking_getIntensity_result {
 public:

  Tracking_getIntensity_result() : success(0) {
  }

  virtual ~Tracking_getIntensity_result() throw() {}

  int8_t success;

  _Tracking_getIntensity_result__isset __isset;

  void __set_success(const int8_t val) {
    success = val;
  }

  bool operator == (const Tracking_getIntensity_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Tracking_getIntensity_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Tracking_getIntensity_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Tracking_getIntensity_presult__isset {
  _Tracking_getIntensity_presult__isset() : success(false) {}
  bool success;
} _Tracking_getIntensity_presult__isset;

class Tracking_getIntensity_presult {
 public:


  virtual ~Tracking_getIntensity_presult() throw() {}

  int8_t* success;

  _Tracking_getIntensity_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Tracking_getMoveStatus_args {
 public:

  Tracking_getMoveStatus_args() {
  }

  virtual ~Tracking_getMoveStatus_args() throw() {}


  bool operator == (const Tracking_getMoveStatus_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Tracking_getMoveStatus_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Tracking_getMoveStatus_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Tracking_getMoveStatus_pargs {
 public:


  virtual ~Tracking_getMoveStatus_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Tracking_getMoveStatus_result__isset {
  _Tracking_getMoveStatus_result__isset() : success(false) {}
  bool success;
} _Tracking_getMoveStatus_result__isset;

class Tracking_getMoveStatus_result {
 public:

  Tracking_getMoveStatus_result() : success((MoveStatus::type)0) {
  }

  virtual ~Tracking_getMoveStatus_result() throw() {}

  MoveStatus::type success;

  _Tracking_getMoveStatus_result__isset __isset;

  void __set_success(const MoveStatus::type val) {
    success = val;
  }

  bool operator == (const Tracking_getMoveStatus_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Tracking_getMoveStatus_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Tracking_getMoveStatus_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Tracking_getMoveStatus_presult__isset {
  _Tracking_getMoveStatus_presult__isset() : success(false) {}
  bool success;
} _Tracking_getMoveStatus_presult__isset;

class Tracking_getMoveStatus_presult {
 public:


  virtual ~Tracking_getMoveStatus_presult() throw() {}

  MoveStatus::type* success;

  _Tracking_getMoveStatus_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Tracking_getActualPos_args {
 public:

  Tracking_getActualPos_args() {
  }

  virtual ~Tracking_getActualPos_args() throw() {}


  bool operator == (const Tracking_getActualPos_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Tracking_getActualPos_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Tracking_getActualPos_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Tracking_getActualPos_pargs {
 public:


  virtual ~Tracking_getActualPos_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Tracking_getActualPos_result__isset {
  _Tracking_getActualPos_result__isset() : success(false) {}
  bool success;
} _Tracking_getActualPos_result__isset;

class Tracking_getActualPos_result {
 public:

  Tracking_getActualPos_result() {
  }

  virtual ~Tracking_getActualPos_result() throw() {}

  Coordinates success;

  _Tracking_getActualPos_result__isset __isset;

  void __set_success(const Coordinates& val) {
    success = val;
  }

  bool operator == (const Tracking_getActualPos_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Tracking_getActualPos_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Tracking_getActualPos_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Tracking_getActualPos_presult__isset {
  _Tracking_getActualPos_presult__isset() : success(false) {}
  bool success;
} _Tracking_getActualPos_presult__isset;

class Tracking_getActualPos_presult {
 public:


  virtual ~Tracking_getActualPos_presult() throw() {}

  Coordinates* success;

  _Tracking_getActualPos_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class TrackingClient : virtual public TrackingIf {
 public:
  TrackingClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  TrackingClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void setMode(const PointMode::type mode);
  void send_setMode(const PointMode::type mode);
  void recv_setMode();
  PointMode::type getMode();
  void send_getMode();
  PointMode::type recv_getMode();
  void setPos(const Coordinates& coord);
  void send_setPos(const Coordinates& coord);
  void recv_setPos();
  void setOnOff(const bool state);
  void send_setOnOff(const bool state);
  void recv_setOnOff();
  void halt();
  void send_halt();
  void recv_halt();
  void sleep();
  void send_sleep();
  void recv_sleep();
  void wake();
  void send_wake();
  void recv_wake();
  void setIntensity(const int8_t intens);
  void send_setIntensity(const int8_t intens);
  void recv_setIntensity();
  void calibrate();
  void send_calibrate();
  void recv_calibrate();
  LightStatus::type getLightStatus();
  void send_getLightStatus();
  LightStatus::type recv_getLightStatus();
  int8_t getIntensity();
  void send_getIntensity();
  int8_t recv_getIntensity();
  MoveStatus::type getMoveStatus();
  void send_getMoveStatus();
  MoveStatus::type recv_getMoveStatus();
  void getActualPos(Coordinates& _return);
  void send_getActualPos();
  void recv_getActualPos(Coordinates& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class TrackingProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<TrackingIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (TrackingProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_setMode(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getMode(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_setPos(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_setOnOff(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_halt(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sleep(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_wake(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_setIntensity(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_calibrate(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getLightStatus(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getIntensity(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getMoveStatus(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getActualPos(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  TrackingProcessor(boost::shared_ptr<TrackingIf> iface) :
    iface_(iface) {
    processMap_["setMode"] = &TrackingProcessor::process_setMode;
    processMap_["getMode"] = &TrackingProcessor::process_getMode;
    processMap_["setPos"] = &TrackingProcessor::process_setPos;
    processMap_["setOnOff"] = &TrackingProcessor::process_setOnOff;
    processMap_["halt"] = &TrackingProcessor::process_halt;
    processMap_["sleep"] = &TrackingProcessor::process_sleep;
    processMap_["wake"] = &TrackingProcessor::process_wake;
    processMap_["setIntensity"] = &TrackingProcessor::process_setIntensity;
    processMap_["calibrate"] = &TrackingProcessor::process_calibrate;
    processMap_["getLightStatus"] = &TrackingProcessor::process_getLightStatus;
    processMap_["getIntensity"] = &TrackingProcessor::process_getIntensity;
    processMap_["getMoveStatus"] = &TrackingProcessor::process_getMoveStatus;
    processMap_["getActualPos"] = &TrackingProcessor::process_getActualPos;
  }

  virtual ~TrackingProcessor() {}
};

class TrackingProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  TrackingProcessorFactory(const ::boost::shared_ptr< TrackingIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< TrackingIfFactory > handlerFactory_;
};

class TrackingMultiface : virtual public TrackingIf {
 public:
  TrackingMultiface(std::vector<boost::shared_ptr<TrackingIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~TrackingMultiface() {}
 protected:
  std::vector<boost::shared_ptr<TrackingIf> > ifaces_;
  TrackingMultiface() {}
  void add(boost::shared_ptr<TrackingIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void setMode(const PointMode::type mode) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->setMode(mode);
    }
    ifaces_[i]->setMode(mode);
  }

  PointMode::type getMode() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getMode();
    }
    return ifaces_[i]->getMode();
  }

  void setPos(const Coordinates& coord) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->setPos(coord);
    }
    ifaces_[i]->setPos(coord);
  }

  void setOnOff(const bool state) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->setOnOff(state);
    }
    ifaces_[i]->setOnOff(state);
  }

  void halt() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->halt();
    }
    ifaces_[i]->halt();
  }

  void sleep() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sleep();
    }
    ifaces_[i]->sleep();
  }

  void wake() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->wake();
    }
    ifaces_[i]->wake();
  }

  void setIntensity(const int8_t intens) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->setIntensity(intens);
    }
    ifaces_[i]->setIntensity(intens);
  }

  void calibrate() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->calibrate();
    }
    ifaces_[i]->calibrate();
  }

  LightStatus::type getLightStatus() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getLightStatus();
    }
    return ifaces_[i]->getLightStatus();
  }

  int8_t getIntensity() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getIntensity();
    }
    return ifaces_[i]->getIntensity();
  }

  MoveStatus::type getMoveStatus() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getMoveStatus();
    }
    return ifaces_[i]->getMoveStatus();
  }

  void getActualPos(Coordinates& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getActualPos(_return);
    }
    ifaces_[i]->getActualPos(_return);
    return;
  }

};



#endif
